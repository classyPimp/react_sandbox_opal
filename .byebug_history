continue
p e
@model.avatar
@model
p e
continue
p e
continue
@permitted_attributes
@model
p e
continue
p e
continue
p e
continue
p e
continue
@params[:offered_service][:avatar][]
@params[:offered_service]
continue
@params[:offered_service][:avatar]
@params
continue
p e
continue
price_item_ids
continue
price_item_ids
continue
p x[0]
if !!x[0]['_destroy'] && x[0]['id']; p true; else; p false;
if !x[0]['_destroy'] && x[0]['id']; p true; else; p false;
if !x[0]['_destroy'] && x[0]['id']; p true; else; p false; end
if !x[0]['_destroy'] && x[0]['id']; p true; elsif; p false; end
if !x[0]['_destroy'] && x[0]['id']; p true; else; p false; end
p !x[0]['_destroy'] && x[0]['id']
!x[0]['_destroy'] && x[0]['id']
x = @associated_price_item_params
price_item_ids
continue
@associated_price_item_params[0]['price_item']['_destroy']
@associated_price_item_params
price_item_ids
continue
@model.paginate(per_page: per_page, page: page)
continue
@blog.si_user1id
@blog.as_json(@perms.serialize_on_success)
@blogs.as_json(@perms.serialize_on_success)
continue
@appointment.patient_id.class
@appointment.patient_id
@appointment.errors
@appointment.save
@appointments.save
@appointment.patient_id
@appointment.user_id
continue
p e
continue
p e
continue
params[:price_category][:name] = nil
continue
params[:price_category][:name] = nil
continue
params[:price_category][:name] = nil
continue
coninue
params[:price_category][:name] = nil
continue
params[:to]
params[:from]
continue
params[:from]
continue
@model
continue
per_page
page
@model
continue
per_page
page
@model
continue
model.total_pages
model.total_pages = nil
model.total_pages
model.total_entries
model.current_page
continue
@user.roles
continue
@permitted_attributes = @permitted_attributes.to_h
@permitted_attributes.to_h
continue
@permitted_attributes.permit(roles_attributes: [:name])
@permitted_attributes.require('roles_attributes').has_key? :name
@permitted_attributes.has_key?('name')
@permitted_attributes.has_key?('roles_attributes')
@permitted_attributes.has_key('roles_attributes')
continue
@permitted_attributes.permit!
@permitted_attributes.require(:roles_attributes).permit(:name)
@permitted_attributes.require(:roles_attributes)
@permitted_attributes.permit('roles_attributes')
@permitted_attributes.permit(:roles_attributes)
continue
@permitted_attributes.require('roles_attributes').permitted?
@permitted_attributes.require('roles_attributes')
@permitted_attributes
@permitted_attributes.permitted?
@permitted_attributes[:roles_attributes].permitted?
@permitted_attributes[:roles_attributes]
@permitted_attributes
continue
@permitted_attributes
continue
x.try(:to_i!)
x.try(:to_i)
x.try(:to_i).is_a?(Integer)
x = @attributes_that_were_assigned["price"]
continue
@attributes_that_were_assigned
continue
@permitted_attributes["price"]
@permitted_attributes[:doo]
@permitted_attributes
continue
x.body
continue
render plain: x.body.html_safe
x = fetch('http://pikabu.ru')
x.body
x = fetch('http://localhost:8888/')
continue
render plain: x.body
x.body
x
x = fetch('http://pikabu.ru')
continue
render plain: x.body
x.body
continue
x
render plain: x.body
continue
response.read_body
response.value
response.body
response.value
response
continue
@permitted_attributes
continue
@permitted_attributes
continue
@params
@permitted_attributes
@permitted_attrtibutes
@permitted_atrtibutes
continue
@permitted_attributes
continue
@permitted_attributes
continue
@permitted_attributes
continue
e
@user.errors
@user.error
continue
e
@user.errors
@user
continue
appointment_destroy_cmpsr
continue
appointment
continue
appointments[0]
appointment[0]
          appointment_destroy_cmpsr = ComposerFor::Appointment::Doctor::Destroy(appointment)
appointments.each do |appointment|
appointments
continue
a_a.map
continue
a_a.map
continue
a_a.map
continue
@a.custom_errors
continue
self.errors[:start_date] << 'fooooooo'
self.errors
self.errors.any?
self.erros.any?
continue
@appointment.errors.any?
continue
@a.errors.any?
continue
@appointment.errors.any?
@appointment.errors[:start_date]
continue
@a.errors[:start_date]
continue
@appointment.errors
@appointment.errors[:start_date] = "foo"
@appointment.errors[:start_date]
@appointment.errors
continue
@a.valid?
@a.errors.any?
continue
@appointment.errors
@appointment.errors.any?
@appointment.errors.add :base, 'foo'
@appointment.errors.any?
@appointment.valid?
@appointment.errors.add :start_date, 'invalid'
@appointment.valid?
@appointment.errors
continue
@appointment.valid?
@appointment.errors[:start_date] = "foo"
@apointment.errors[:start_date] = "foo"
@appointment.valid?
@appointment.errors.add(:start_date, "ascasasf")
@appointment.errors
@appointment.valid?
continue
@appointment.valid?
@appointment.valid
@appointment.save!
@appointment.errors.any?
@appointment.errores.any?
@appointment.errors
continue
@a.errors.any?
@a.error.any?
continue
@a.errors.add(:start_date, "can't be in past")
@a.start_date > Time.now
@a.start_date < Time.now
@a.start.date < Time.now
x = Time.now
@a.errors.any?
@a.errors
q
raise
continue
params[:appointment][:appointment_detail_attributes][:extra_details] = ""
